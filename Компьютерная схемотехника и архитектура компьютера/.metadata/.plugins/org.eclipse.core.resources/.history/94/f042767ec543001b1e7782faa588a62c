#include "stm32f4xx.h"
#include "stm32f4xx_gpio.h"
#include "stm32f4xx_rcc.h"
#include "stm32f4xx_tim.h"
#include "misc.h"

void INTTIM_Config(void);
void GPIO_Config(void);

enum State{
	LED4,
	LED3,
	LED5,
	LED6,
	ALL
};
static enum State state = LED4;
void logic(){
	switch (state) {
		case LED4:
			TIM4->CCR1 = brightness;
			TIM4->CCR4 = 0;
			break;
		case LED3:
			TIM4->CCR2 = brightness;
			TIM4->CCR1 = 0;
			break;
		case LED5:
			TIM4->CCR3 = brightness;
			TIM4->CCR2 = 0;
			break;
		case LED6:
			TIM4->CCR4 = brightness;
			TIM4->CCR3 = 0;
			break;
		default:
			state = LED4;
		}
}

int main(void) {
	GPIO_Config();
	INTTIM_Config();

	while(1) {
		logic();
	}
}

void TIM2_IRQHandler(void) {
    if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET) {
        TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
        state++;
    }
}

void GPIO_Config(void) {
	// инициализация ножек контроллера
	GPIO_InitTypeDef gpioConf;
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
	gpioConf.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
	gpioConf.GPIO_Mode = GPIO_Mode_OUT;
	gpioConf.GPIO_Speed = GPIO_Speed_100MHz;
	gpioConf.GPIO_OType = GPIO_OType_PP;
	gpioConf.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init(GPIOD, &gpioConf);
}

void INTTIM_Config(void){
	//инициализация обработки прерываний
	NVIC_InitTypeDef nvic_struct;
	nvic_struct.NVIC_IRQChannel = TIM2_IRQn;
	nvic_struct.NVIC_IRQChannelPreemptionPriority = 0;
	nvic_struct.NVIC_IRQChannelSubPriority = 1;
	nvic_struct.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&nvic_struct);

	TIM_TimeBaseInitTypeDef tim_struct;

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
	tim_struct.TIM_Prescaler = 8400 - 1;
	tim_struct.TIM_Period = 10000 - 1;
	tim_struct.TIM_ClockDivision = 0;
	tim_struct.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseInit(TIM2, &tim_struct);
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
	TIM_Cmd(TIM2, ENABLE);
}

