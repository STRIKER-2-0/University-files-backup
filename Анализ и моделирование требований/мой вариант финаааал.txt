Клас Application - головний управляючий клас, ініціюючий сценарні прецеденти
Операції :
-logOut() - сценарна операція, яка виконує сценарій виходу користувача з акаунту.
-signIn() - сценарна операція, що виконує вхід до акаунту користувача.
-signUp() - сценарна операція, яка забезпечує реєстрацію нового облікового запису користувача.
-personalInfo() - сценарна операція, надає доступ до статистики ігор та данних користувача.
-settings() - сценарна операція, містить всі налаштування для гри.
-game() - сценарна операція, сценарна оперція, що запускає гру.
-rules() - сценарна операція, містить всі правила для гри.

Клас Game є управляючим класом, що містить дескриптори усіх інших класів. 
Атрибути :
-cards - константний глобальний масив карт, що використовуються у грі.
-players - масив об'єктів-гравців.
-deck - ігрова колода, з якої гравці беруьт карти.
-abort - відбій, куди відходять карти с хабарів.
-bride - хабар, карти на столі.
Операції :
- play() - розпочинає новий сеанс гри.
- new() - запускає нову гру.
- preparation() - виконує попередні підготування до розпочинання сеансу гри.
- dealCards() - роздає карти гравцям.
- setTrump() - змінює козир шляхом зміни витянутої карти.
- setTurnPlayer() - змінює напрямок ходів ігроків.
- loadGame() - запускає збережену незакінчену партію.
- playing() - розпочинає процес гри.
- setAuthorized(param : boolean) - змінює статус авторизації користувача.
- draw() - візуалізує інтерфейс взфємодії додатку з користувачем.
- takingCards() - запуск процедури взяття карт з колоди гравцями по закінченню розіграшу.

Клас Card - карта, яку використовують під час гри. 
Атрибути :
-rank: ранг карти в порядку старшинства (від молодшої до старшої).
-category: одна з чотирьох категорій, на які поділяються карти в колоді.
-trump: масть, яка у поточній грі визначається старшою, тобто б'є будь яку карту всіх інших мастей.

Клас Player - об'єкт, котрий виконує хід чи відбивається. 
Атрибути :
-cardsInHand: набір карт, які належать гравцю.
Операції :
-turn() - сценарна операція, виконує хід
-pullCards() - витягнути карти

Клас Deck - набір карт, які гравці використовують під час гри. Гравці беруть карти з колоди. 
Атрибути :
-cardsInDeck: набір карт, які гравці використовують під час гри.
Операції :
- refreshDeck() - перемішує колоду карт.
- getTopCards (count : int): int[] - видає задану кількість верхніх карт з стеку колоди.

Клас Abort - карти, що вийшли з гри. 
Атрибути :
-cardsInAbort: набір карт, що вийшли з гри.
Операції :
-showAbortInRange(viewedCard: int): int[] - показує відбій в деякому діапазоні.
-appendCards(cards: int[]) - додавання карт.

Клас Bride - відкриті карти, які лежать на столі. Хабар може бути перенесений у руку гравця, що відбивається, або у відбій.
Атрибути :
-bride набір відкритих карт, які лежать на столі.
Операції :
- moveToAbort() - переміщає набір відкритих карт, що знаходяться на столі, у відбій.
- appendCards(cards : int) - додає карти до набору відкритих карт, які лежать на столі.
- getCatds(): int[] - переміщає набір відкритих карт, що знаходяться на столі, у руки гравця, що не відбив їх.

Клас Info - являє собою набір правил для гри, котрий користувач може переглядати та по котрим проходить гра.
Атрибути:
- rules - список строк, в котрих містяться  правила.
Операції :
-showRules() : void - відповідає за відображення правил гри.
-showFAQ() : void - дозволяє переглянути найбільш поширені питання та відповіді на них.
-showTerms() : void - дозволяє переглянути користувачу список термінів, що використовуються у грі. 
-searchInfo(word : String) : String[] - дозволяє користувачу шукати необхідну інформацію за ключовим словом.
-personalInfo() - дозволяє переглянути інформацію про користувача.(?)

Клас Account являє собою загальну інформацію про користувача. 
Атрибути:
-password - зберігає пароль користувача
-username - зберігає нікнейм користувача в грі
- settings - налаштування користувача для гри
- isAuthorized - перевірка на авторизацію користувача 
Операції :
-changePassword(password : string) - дозволяє змінити пароль користувача.
-validateUserPassword(password) - відповідає за підтвердження паролю користувачем.
-changeUserName(name : string) - дозволяє змінити нікнейм користувача.
validateUserName(username : string) - відповідає за підтвердження нікнейму користувачем.

Клас Settings дозволяє налаштовувати додаткові правила в грі. 
Атрибути:
-trumpSelection- дозволяє налаштувати правило щодо вибору козирної карти.
-lookAbort - відповідає за настройку правила про можливість перегляду відбою в грі.
-aceNotLead - дозволяє налаштувати правило "туз колоду не веде".
-lossOnExit - перевірка на програш чи вихід гравцем з гри.
-saveSettingsForNewGame - дозволяє встановлювати правила за замовчуванням чи налаштовані користувачем.
-numberOfBots - кількість ботів.
Операції :
-showRulesSettings() - дозволяє користувачу переглянути налаштування правил.
-getTrumpSelection() : boolean - відображує обраний козир.

Клас Registarion відповідає за процес регістрації нового користувача.
Операції:
-validating(username : string, password : string) - перевіряє введені дані на коректність.
-signUp(username : string, password : string) - реєстурє нового користувача у системі.

Клас Authentication відповідає за процес
-validateUserData(username : string, password : string) - перевіряє введені дані на коректність.
-signIn(username : string, password : string) - авторизує зареєстрованого гористувача.

Клас Database - абстрактний клас, що відповідає за з'єднання з базою даних.
-connect() - встановлює з'єднання з базою даних.
-getGameData() - завантажує дані про сеанс гри з бази даних.
-disconnect() - розриваєЫ встановлене з'єднання з базою даних.
-changePasword(password : string) - змінює пароль користувача.
-changeName(name : string) - змінює им'я користувача.
-getSettings() : Settings - повертає налаштування користувача з бази даних.
-loginSearch(username : string) - проводить пошук паролю за именем користувача.
-addAcount(username : string, password : string) - додає дані про акаунт до бази даних.
-getPersonalInfo() : Info - повертає персональну інформацію про обліковий запис.
-saveGame() - завантажує дані про сеанс гри до бази даних.

