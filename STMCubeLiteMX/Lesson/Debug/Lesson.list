
Lesson.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001524  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080016ac  080016ac  000116ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080016bc  080016bc  000116bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080016c4  080016c4  000116c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080016c8  080016c8  000116c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  080016cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          00000020  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000002c  2000002c  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   000039d9  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00000d33  00000000  00000000  00023a15  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000003f0  00000000  00000000  00024748  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000368  00000000  00000000  00024b38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00001bb5  00000000  00000000  00024ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00001613  00000000  00000000  00026a55  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00028068  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000e2c  00000000  00000000  000280e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001694 	.word	0x08001694

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001694 	.word	0x08001694

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004dc:	4a0e      	ldr	r2, [pc, #56]	; (8000518 <HAL_Init+0x40>)
 80004de:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_Init+0x40>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004e8:	4a0b      	ldr	r2, [pc, #44]	; (8000518 <HAL_Init+0x40>)
 80004ea:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <HAL_Init+0x40>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f4:	4a08      	ldr	r2, [pc, #32]	; (8000518 <HAL_Init+0x40>)
 80004f6:	4b08      	ldr	r3, [pc, #32]	; (8000518 <HAL_Init+0x40>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000500:	2003      	movs	r0, #3
 8000502:	f000 f92d 	bl	8000760 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000506:	2000      	movs	r0, #0
 8000508:	f000 f808 	bl	800051c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800050c:	f001 f800 	bl	8001510 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000510:	2300      	movs	r3, #0
}
 8000512:	4618      	mov	r0, r3
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40023c00 	.word	0x40023c00

0800051c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <HAL_InitTick+0x54>)
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	4b12      	ldr	r3, [pc, #72]	; (8000574 <HAL_InitTick+0x58>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	4619      	mov	r1, r3
 800052e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000532:	fbb3 f3f1 	udiv	r3, r3, r1
 8000536:	fbb2 f3f3 	udiv	r3, r2, r3
 800053a:	4618      	mov	r0, r3
 800053c:	f000 f937 	bl	80007ae <HAL_SYSTICK_Config>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000546:	2301      	movs	r3, #1
 8000548:	e00e      	b.n	8000568 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2b0f      	cmp	r3, #15
 800054e:	d80a      	bhi.n	8000566 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000550:	2200      	movs	r2, #0
 8000552:	6879      	ldr	r1, [r7, #4]
 8000554:	f04f 30ff 	mov.w	r0, #4294967295
 8000558:	f000 f90d 	bl	8000776 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800055c:	4a06      	ldr	r2, [pc, #24]	; (8000578 <HAL_InitTick+0x5c>)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000562:	2300      	movs	r3, #0
 8000564:	e000      	b.n	8000568 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000566:	2301      	movs	r3, #1
}
 8000568:	4618      	mov	r0, r3
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000008 	.word	0x20000008
 8000574:	20000004 	.word	0x20000004
 8000578:	20000000 	.word	0x20000000

0800057c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <HAL_IncTick+0x20>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	461a      	mov	r2, r3
 8000586:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <HAL_IncTick+0x24>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4413      	add	r3, r2
 800058c:	4a04      	ldr	r2, [pc, #16]	; (80005a0 <HAL_IncTick+0x24>)
 800058e:	6013      	str	r3, [r2, #0]
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000004 	.word	0x20000004
 80005a0:	20000028 	.word	0x20000028

080005a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  return uwTick;
 80005a8:	4b03      	ldr	r3, [pc, #12]	; (80005b8 <HAL_GetTick+0x14>)
 80005aa:	681b      	ldr	r3, [r3, #0]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000028 	.word	0x20000028

080005bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005c4:	f7ff ffee 	bl	80005a4 <HAL_GetTick>
 80005c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005d4:	d005      	beq.n	80005e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005d6:	4b09      	ldr	r3, [pc, #36]	; (80005fc <HAL_Delay+0x40>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	461a      	mov	r2, r3
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	4413      	add	r3, r2
 80005e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005e2:	bf00      	nop
 80005e4:	f7ff ffde 	bl	80005a4 <HAL_GetTick>
 80005e8:	4602      	mov	r2, r0
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	1ad2      	subs	r2, r2, r3
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d3f7      	bcc.n	80005e4 <HAL_Delay+0x28>
  {
  }
}
 80005f4:	bf00      	nop
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000004 	.word	0x20000004

08000600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	f003 0307 	and.w	r3, r3, #7
 800060e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <__NVIC_SetPriorityGrouping+0x44>)
 8000612:	68db      	ldr	r3, [r3, #12]
 8000614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000616:	68ba      	ldr	r2, [r7, #8]
 8000618:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800061c:	4013      	ands	r3, r2
 800061e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000628:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800062c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000632:	4a04      	ldr	r2, [pc, #16]	; (8000644 <__NVIC_SetPriorityGrouping+0x44>)
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	60d3      	str	r3, [r2, #12]
}
 8000638:	bf00      	nop
 800063a:	3714      	adds	r7, #20
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	e000ed00 	.word	0xe000ed00

08000648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800064c:	4b04      	ldr	r3, [pc, #16]	; (8000660 <__NVIC_GetPriorityGrouping+0x18>)
 800064e:	68db      	ldr	r3, [r3, #12]
 8000650:	0a1b      	lsrs	r3, r3, #8
 8000652:	f003 0307 	and.w	r3, r3, #7
}
 8000656:	4618      	mov	r0, r3
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	6039      	str	r1, [r7, #0]
 800066e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000674:	2b00      	cmp	r3, #0
 8000676:	db0a      	blt.n	800068e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000678:	490d      	ldr	r1, [pc, #52]	; (80006b0 <__NVIC_SetPriority+0x4c>)
 800067a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067e:	683a      	ldr	r2, [r7, #0]
 8000680:	b2d2      	uxtb	r2, r2
 8000682:	0112      	lsls	r2, r2, #4
 8000684:	b2d2      	uxtb	r2, r2
 8000686:	440b      	add	r3, r1
 8000688:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800068c:	e00a      	b.n	80006a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068e:	4909      	ldr	r1, [pc, #36]	; (80006b4 <__NVIC_SetPriority+0x50>)
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	f003 030f 	and.w	r3, r3, #15
 8000696:	3b04      	subs	r3, #4
 8000698:	683a      	ldr	r2, [r7, #0]
 800069a:	b2d2      	uxtb	r2, r2
 800069c:	0112      	lsls	r2, r2, #4
 800069e:	b2d2      	uxtb	r2, r2
 80006a0:	440b      	add	r3, r1
 80006a2:	761a      	strb	r2, [r3, #24]
}
 80006a4:	bf00      	nop
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	e000e100 	.word	0xe000e100
 80006b4:	e000ed00 	.word	0xe000ed00

080006b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b089      	sub	sp, #36	; 0x24
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	f003 0307 	and.w	r3, r3, #7
 80006ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006cc:	69fb      	ldr	r3, [r7, #28]
 80006ce:	f1c3 0307 	rsb	r3, r3, #7
 80006d2:	2b04      	cmp	r3, #4
 80006d4:	bf28      	it	cs
 80006d6:	2304      	movcs	r3, #4
 80006d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006da:	69fb      	ldr	r3, [r7, #28]
 80006dc:	3304      	adds	r3, #4
 80006de:	2b06      	cmp	r3, #6
 80006e0:	d902      	bls.n	80006e8 <NVIC_EncodePriority+0x30>
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	3b03      	subs	r3, #3
 80006e6:	e000      	b.n	80006ea <NVIC_EncodePriority+0x32>
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ec:	2201      	movs	r2, #1
 80006ee:	69bb      	ldr	r3, [r7, #24]
 80006f0:	fa02 f303 	lsl.w	r3, r2, r3
 80006f4:	1e5a      	subs	r2, r3, #1
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	401a      	ands	r2, r3
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006fe:	2101      	movs	r1, #1
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	fa01 f303 	lsl.w	r3, r1, r3
 8000706:	1e59      	subs	r1, r3, #1
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800070c:	4313      	orrs	r3, r2
         );
}
 800070e:	4618      	mov	r0, r3
 8000710:	3724      	adds	r7, #36	; 0x24
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
	...

0800071c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	3b01      	subs	r3, #1
 8000728:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800072c:	d301      	bcc.n	8000732 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800072e:	2301      	movs	r3, #1
 8000730:	e00f      	b.n	8000752 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000732:	4a0a      	ldr	r2, [pc, #40]	; (800075c <SysTick_Config+0x40>)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	3b01      	subs	r3, #1
 8000738:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800073a:	210f      	movs	r1, #15
 800073c:	f04f 30ff 	mov.w	r0, #4294967295
 8000740:	f7ff ff90 	bl	8000664 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000744:	4b05      	ldr	r3, [pc, #20]	; (800075c <SysTick_Config+0x40>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800074a:	4b04      	ldr	r3, [pc, #16]	; (800075c <SysTick_Config+0x40>)
 800074c:	2207      	movs	r2, #7
 800074e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000750:	2300      	movs	r3, #0
}
 8000752:	4618      	mov	r0, r3
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	e000e010 	.word	0xe000e010

08000760 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f7ff ff49 	bl	8000600 <__NVIC_SetPriorityGrouping>
}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}

08000776 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000776:	b580      	push	{r7, lr}
 8000778:	b086      	sub	sp, #24
 800077a:	af00      	add	r7, sp, #0
 800077c:	4603      	mov	r3, r0
 800077e:	60b9      	str	r1, [r7, #8]
 8000780:	607a      	str	r2, [r7, #4]
 8000782:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000788:	f7ff ff5e 	bl	8000648 <__NVIC_GetPriorityGrouping>
 800078c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	68b9      	ldr	r1, [r7, #8]
 8000792:	6978      	ldr	r0, [r7, #20]
 8000794:	f7ff ff90 	bl	80006b8 <NVIC_EncodePriority>
 8000798:	4602      	mov	r2, r0
 800079a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800079e:	4611      	mov	r1, r2
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff ff5f 	bl	8000664 <__NVIC_SetPriority>
}
 80007a6:	bf00      	nop
 80007a8:	3718      	adds	r7, #24
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b082      	sub	sp, #8
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007b6:	6878      	ldr	r0, [r7, #4]
 80007b8:	f7ff ffb0 	bl	800071c <SysTick_Config>
 80007bc:	4603      	mov	r3, r0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
	...

080007c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b089      	sub	sp, #36	; 0x24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80007da:	2300      	movs	r3, #0
 80007dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007de:	2300      	movs	r3, #0
 80007e0:	61fb      	str	r3, [r7, #28]
 80007e2:	e16b      	b.n	8000abc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80007e4:	2201      	movs	r2, #1
 80007e6:	69fb      	ldr	r3, [r7, #28]
 80007e8:	fa02 f303 	lsl.w	r3, r2, r3
 80007ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	4013      	ands	r3, r2
 80007f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80007f8:	693a      	ldr	r2, [r7, #16]
 80007fa:	697b      	ldr	r3, [r7, #20]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	f040 815a 	bne.w	8000ab6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d00b      	beq.n	8000822 <HAL_GPIO_Init+0x5a>
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	2b02      	cmp	r3, #2
 8000810:	d007      	beq.n	8000822 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000816:	2b11      	cmp	r3, #17
 8000818:	d003      	beq.n	8000822 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	2b12      	cmp	r3, #18
 8000820:	d130      	bne.n	8000884 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	689b      	ldr	r3, [r3, #8]
 8000826:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000828:	69fb      	ldr	r3, [r7, #28]
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	2203      	movs	r2, #3
 800082e:	fa02 f303 	lsl.w	r3, r2, r3
 8000832:	43db      	mvns	r3, r3
 8000834:	69ba      	ldr	r2, [r7, #24]
 8000836:	4013      	ands	r3, r2
 8000838:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	68da      	ldr	r2, [r3, #12]
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	005b      	lsls	r3, r3, #1
 8000842:	fa02 f303 	lsl.w	r3, r2, r3
 8000846:	69ba      	ldr	r2, [r7, #24]
 8000848:	4313      	orrs	r3, r2
 800084a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	69ba      	ldr	r2, [r7, #24]
 8000850:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000858:	2201      	movs	r2, #1
 800085a:	69fb      	ldr	r3, [r7, #28]
 800085c:	fa02 f303 	lsl.w	r3, r2, r3
 8000860:	43db      	mvns	r3, r3
 8000862:	69ba      	ldr	r2, [r7, #24]
 8000864:	4013      	ands	r3, r2
 8000866:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	091b      	lsrs	r3, r3, #4
 800086e:	f003 0201 	and.w	r2, r3, #1
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	fa02 f303 	lsl.w	r3, r2, r3
 8000878:	69ba      	ldr	r2, [r7, #24]
 800087a:	4313      	orrs	r3, r2
 800087c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	69ba      	ldr	r2, [r7, #24]
 8000882:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	2203      	movs	r2, #3
 8000890:	fa02 f303 	lsl.w	r3, r2, r3
 8000894:	43db      	mvns	r3, r3
 8000896:	69ba      	ldr	r2, [r7, #24]
 8000898:	4013      	ands	r3, r2
 800089a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	689a      	ldr	r2, [r3, #8]
 80008a0:	69fb      	ldr	r3, [r7, #28]
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	fa02 f303 	lsl.w	r3, r2, r3
 80008a8:	69ba      	ldr	r2, [r7, #24]
 80008aa:	4313      	orrs	r3, r2
 80008ac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	69ba      	ldr	r2, [r7, #24]
 80008b2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	2b02      	cmp	r3, #2
 80008ba:	d003      	beq.n	80008c4 <HAL_GPIO_Init+0xfc>
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	2b12      	cmp	r3, #18
 80008c2:	d123      	bne.n	800090c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008c4:	69fb      	ldr	r3, [r7, #28]
 80008c6:	08da      	lsrs	r2, r3, #3
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	3208      	adds	r2, #8
 80008cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008d2:	69fb      	ldr	r3, [r7, #28]
 80008d4:	f003 0307 	and.w	r3, r3, #7
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	220f      	movs	r2, #15
 80008dc:	fa02 f303 	lsl.w	r3, r2, r3
 80008e0:	43db      	mvns	r3, r3
 80008e2:	69ba      	ldr	r2, [r7, #24]
 80008e4:	4013      	ands	r3, r2
 80008e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	691a      	ldr	r2, [r3, #16]
 80008ec:	69fb      	ldr	r3, [r7, #28]
 80008ee:	f003 0307 	and.w	r3, r3, #7
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	fa02 f303 	lsl.w	r3, r2, r3
 80008f8:	69ba      	ldr	r2, [r7, #24]
 80008fa:	4313      	orrs	r3, r2
 80008fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80008fe:	69fb      	ldr	r3, [r7, #28]
 8000900:	08da      	lsrs	r2, r3, #3
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	3208      	adds	r2, #8
 8000906:	69b9      	ldr	r1, [r7, #24]
 8000908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	2203      	movs	r2, #3
 8000918:	fa02 f303 	lsl.w	r3, r2, r3
 800091c:	43db      	mvns	r3, r3
 800091e:	69ba      	ldr	r2, [r7, #24]
 8000920:	4013      	ands	r3, r2
 8000922:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	f003 0203 	and.w	r2, r3, #3
 800092c:	69fb      	ldr	r3, [r7, #28]
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	fa02 f303 	lsl.w	r3, r2, r3
 8000934:	69ba      	ldr	r2, [r7, #24]
 8000936:	4313      	orrs	r3, r2
 8000938:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	69ba      	ldr	r2, [r7, #24]
 800093e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000948:	2b00      	cmp	r3, #0
 800094a:	f000 80b4 	beq.w	8000ab6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	4a5f      	ldr	r2, [pc, #380]	; (8000ad0 <HAL_GPIO_Init+0x308>)
 8000954:	4b5e      	ldr	r3, [pc, #376]	; (8000ad0 <HAL_GPIO_Init+0x308>)
 8000956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800095c:	6453      	str	r3, [r2, #68]	; 0x44
 800095e:	4b5c      	ldr	r3, [pc, #368]	; (8000ad0 <HAL_GPIO_Init+0x308>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800096a:	4a5a      	ldr	r2, [pc, #360]	; (8000ad4 <HAL_GPIO_Init+0x30c>)
 800096c:	69fb      	ldr	r3, [r7, #28]
 800096e:	089b      	lsrs	r3, r3, #2
 8000970:	3302      	adds	r3, #2
 8000972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000976:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000978:	69fb      	ldr	r3, [r7, #28]
 800097a:	f003 0303 	and.w	r3, r3, #3
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	220f      	movs	r2, #15
 8000982:	fa02 f303 	lsl.w	r3, r2, r3
 8000986:	43db      	mvns	r3, r3
 8000988:	69ba      	ldr	r2, [r7, #24]
 800098a:	4013      	ands	r3, r2
 800098c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4a51      	ldr	r2, [pc, #324]	; (8000ad8 <HAL_GPIO_Init+0x310>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d02b      	beq.n	80009ee <HAL_GPIO_Init+0x226>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4a50      	ldr	r2, [pc, #320]	; (8000adc <HAL_GPIO_Init+0x314>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d025      	beq.n	80009ea <HAL_GPIO_Init+0x222>
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4a4f      	ldr	r2, [pc, #316]	; (8000ae0 <HAL_GPIO_Init+0x318>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d01f      	beq.n	80009e6 <HAL_GPIO_Init+0x21e>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4a4e      	ldr	r2, [pc, #312]	; (8000ae4 <HAL_GPIO_Init+0x31c>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d019      	beq.n	80009e2 <HAL_GPIO_Init+0x21a>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4a4d      	ldr	r2, [pc, #308]	; (8000ae8 <HAL_GPIO_Init+0x320>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d013      	beq.n	80009de <HAL_GPIO_Init+0x216>
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4a4c      	ldr	r2, [pc, #304]	; (8000aec <HAL_GPIO_Init+0x324>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d00d      	beq.n	80009da <HAL_GPIO_Init+0x212>
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4a4b      	ldr	r2, [pc, #300]	; (8000af0 <HAL_GPIO_Init+0x328>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d007      	beq.n	80009d6 <HAL_GPIO_Init+0x20e>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4a4a      	ldr	r2, [pc, #296]	; (8000af4 <HAL_GPIO_Init+0x32c>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d101      	bne.n	80009d2 <HAL_GPIO_Init+0x20a>
 80009ce:	2307      	movs	r3, #7
 80009d0:	e00e      	b.n	80009f0 <HAL_GPIO_Init+0x228>
 80009d2:	2308      	movs	r3, #8
 80009d4:	e00c      	b.n	80009f0 <HAL_GPIO_Init+0x228>
 80009d6:	2306      	movs	r3, #6
 80009d8:	e00a      	b.n	80009f0 <HAL_GPIO_Init+0x228>
 80009da:	2305      	movs	r3, #5
 80009dc:	e008      	b.n	80009f0 <HAL_GPIO_Init+0x228>
 80009de:	2304      	movs	r3, #4
 80009e0:	e006      	b.n	80009f0 <HAL_GPIO_Init+0x228>
 80009e2:	2303      	movs	r3, #3
 80009e4:	e004      	b.n	80009f0 <HAL_GPIO_Init+0x228>
 80009e6:	2302      	movs	r3, #2
 80009e8:	e002      	b.n	80009f0 <HAL_GPIO_Init+0x228>
 80009ea:	2301      	movs	r3, #1
 80009ec:	e000      	b.n	80009f0 <HAL_GPIO_Init+0x228>
 80009ee:	2300      	movs	r3, #0
 80009f0:	69fa      	ldr	r2, [r7, #28]
 80009f2:	f002 0203 	and.w	r2, r2, #3
 80009f6:	0092      	lsls	r2, r2, #2
 80009f8:	4093      	lsls	r3, r2
 80009fa:	69ba      	ldr	r2, [r7, #24]
 80009fc:	4313      	orrs	r3, r2
 80009fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a00:	4934      	ldr	r1, [pc, #208]	; (8000ad4 <HAL_GPIO_Init+0x30c>)
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	089b      	lsrs	r3, r3, #2
 8000a06:	3302      	adds	r3, #2
 8000a08:	69ba      	ldr	r2, [r7, #24]
 8000a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a0e:	4b3a      	ldr	r3, [pc, #232]	; (8000af8 <HAL_GPIO_Init+0x330>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a14:	693b      	ldr	r3, [r7, #16]
 8000a16:	43db      	mvns	r3, r3
 8000a18:	69ba      	ldr	r2, [r7, #24]
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d003      	beq.n	8000a32 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000a2a:	69ba      	ldr	r2, [r7, #24]
 8000a2c:	693b      	ldr	r3, [r7, #16]
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a32:	4a31      	ldr	r2, [pc, #196]	; (8000af8 <HAL_GPIO_Init+0x330>)
 8000a34:	69bb      	ldr	r3, [r7, #24]
 8000a36:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a38:	4b2f      	ldr	r3, [pc, #188]	; (8000af8 <HAL_GPIO_Init+0x330>)
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	43db      	mvns	r3, r3
 8000a42:	69ba      	ldr	r2, [r7, #24]
 8000a44:	4013      	ands	r3, r2
 8000a46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d003      	beq.n	8000a5c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000a54:	69ba      	ldr	r2, [r7, #24]
 8000a56:	693b      	ldr	r3, [r7, #16]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a5c:	4a26      	ldr	r2, [pc, #152]	; (8000af8 <HAL_GPIO_Init+0x330>)
 8000a5e:	69bb      	ldr	r3, [r7, #24]
 8000a60:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a62:	4b25      	ldr	r3, [pc, #148]	; (8000af8 <HAL_GPIO_Init+0x330>)
 8000a64:	689b      	ldr	r3, [r3, #8]
 8000a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a68:	693b      	ldr	r3, [r7, #16]
 8000a6a:	43db      	mvns	r3, r3
 8000a6c:	69ba      	ldr	r2, [r7, #24]
 8000a6e:	4013      	ands	r3, r2
 8000a70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d003      	beq.n	8000a86 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000a7e:	69ba      	ldr	r2, [r7, #24]
 8000a80:	693b      	ldr	r3, [r7, #16]
 8000a82:	4313      	orrs	r3, r2
 8000a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a86:	4a1c      	ldr	r2, [pc, #112]	; (8000af8 <HAL_GPIO_Init+0x330>)
 8000a88:	69bb      	ldr	r3, [r7, #24]
 8000a8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a8c:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <HAL_GPIO_Init+0x330>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a92:	693b      	ldr	r3, [r7, #16]
 8000a94:	43db      	mvns	r3, r3
 8000a96:	69ba      	ldr	r2, [r7, #24]
 8000a98:	4013      	ands	r3, r2
 8000a9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d003      	beq.n	8000ab0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000aa8:	69ba      	ldr	r2, [r7, #24]
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	4313      	orrs	r3, r2
 8000aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ab0:	4a11      	ldr	r2, [pc, #68]	; (8000af8 <HAL_GPIO_Init+0x330>)
 8000ab2:	69bb      	ldr	r3, [r7, #24]
 8000ab4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	61fb      	str	r3, [r7, #28]
 8000abc:	69fb      	ldr	r3, [r7, #28]
 8000abe:	2b0f      	cmp	r3, #15
 8000ac0:	f67f ae90 	bls.w	80007e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ac4:	bf00      	nop
 8000ac6:	3724      	adds	r7, #36	; 0x24
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40013800 	.word	0x40013800
 8000ad8:	40020000 	.word	0x40020000
 8000adc:	40020400 	.word	0x40020400
 8000ae0:	40020800 	.word	0x40020800
 8000ae4:	40020c00 	.word	0x40020c00
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	40021400 	.word	0x40021400
 8000af0:	40021800 	.word	0x40021800
 8000af4:	40021c00 	.word	0x40021c00
 8000af8:	40013c00 	.word	0x40013c00

08000afc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	460b      	mov	r3, r1
 8000b06:	807b      	strh	r3, [r7, #2]
 8000b08:	4613      	mov	r3, r2
 8000b0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b0c:	787b      	ldrb	r3, [r7, #1]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d003      	beq.n	8000b1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b12:	887a      	ldrh	r2, [r7, #2]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b18:	e003      	b.n	8000b22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b1a:	887b      	ldrh	r3, [r7, #2]
 8000b1c:	041a      	lsls	r2, r3, #16
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	619a      	str	r2, [r3, #24]
}
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	b083      	sub	sp, #12
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
 8000b36:	460b      	mov	r3, r1
 8000b38:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	695a      	ldr	r2, [r3, #20]
 8000b3e:	887b      	ldrh	r3, [r7, #2]
 8000b40:	401a      	ands	r2, r3
 8000b42:	887b      	ldrh	r3, [r7, #2]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d104      	bne.n	8000b52 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000b48:	887b      	ldrh	r3, [r7, #2]
 8000b4a:	041a      	lsls	r2, r3, #16
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000b50:	e002      	b.n	8000b58 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000b52:	887a      	ldrh	r2, [r7, #2]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	619a      	str	r2, [r3, #24]
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d101      	bne.n	8000b76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	e25b      	b.n	800102e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d075      	beq.n	8000c6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b82:	4ba3      	ldr	r3, [pc, #652]	; (8000e10 <HAL_RCC_OscConfig+0x2ac>)
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	f003 030c 	and.w	r3, r3, #12
 8000b8a:	2b04      	cmp	r3, #4
 8000b8c:	d00c      	beq.n	8000ba8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b8e:	4ba0      	ldr	r3, [pc, #640]	; (8000e10 <HAL_RCC_OscConfig+0x2ac>)
 8000b90:	689b      	ldr	r3, [r3, #8]
 8000b92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b96:	2b08      	cmp	r3, #8
 8000b98:	d112      	bne.n	8000bc0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b9a:	4b9d      	ldr	r3, [pc, #628]	; (8000e10 <HAL_RCC_OscConfig+0x2ac>)
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ba2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000ba6:	d10b      	bne.n	8000bc0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ba8:	4b99      	ldr	r3, [pc, #612]	; (8000e10 <HAL_RCC_OscConfig+0x2ac>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d05b      	beq.n	8000c6c <HAL_RCC_OscConfig+0x108>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d157      	bne.n	8000c6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	e236      	b.n	800102e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bc8:	d106      	bne.n	8000bd8 <HAL_RCC_OscConfig+0x74>
 8000bca:	4a91      	ldr	r2, [pc, #580]	; (8000e10 <HAL_RCC_OscConfig+0x2ac>)
 8000bcc:	4b90      	ldr	r3, [pc, #576]	; (8000e10 <HAL_RCC_OscConfig+0x2ac>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bd4:	6013      	str	r3, [r2, #0]
 8000bd6:	e01d      	b.n	8000c14 <HAL_RCC_OscConfig+0xb0>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000be0:	d10c      	bne.n	8000bfc <HAL_RCC_OscConfig+0x98>
 8000be2:	4a8b      	ldr	r2, [pc, #556]	; (8000e10 <HAL_RCC_OscConfig+0x2ac>)
 8000be4:	4b8a      	ldr	r3, [pc, #552]	; (8000e10 <HAL_RCC_OscConfig+0x2ac>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bec:	6013      	str	r3, [r2, #0]
 8000bee:	4a88      	ldr	r2, [pc, #544]	; (8000e10 <HAL_RCC_OscConfig+0x2ac>)
 8000bf0:	4b87      	ldr	r3, [pc, #540]	; (8000e10 <HAL_RCC_OscConfig+0x2ac>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bf8:	6013      	str	r3, [r2, #0]
 8000bfa:	e00b      	b.n	8000c14 <HAL_RCC_OscConfig+0xb0>
 8000bfc:	4a84      	ldr	r2, [pc, #528]	; (8000e10 <HAL_RCC_OscConfig+0x2ac>)
 8000bfe:	4b84      	ldr	r3, [pc, #528]	; (8000e10 <HAL_RCC_OscConfig+0x2ac>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c06:	6013      	str	r3, [r2, #0]
 8000c08:	4a81      	ldr	r2, [pc, #516]	; (8000e10 <HAL_RCC_OscConfig+0x2ac>)
 8000c0a:	4b81      	ldr	r3, [pc, #516]	; (8000e10 <HAL_RCC_OscConfig+0x2ac>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d013      	beq.n	8000c44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c1c:	f7ff fcc2 	bl	80005a4 <HAL_GetTick>
 8000c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c22:	e008      	b.n	8000c36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c24:	f7ff fcbe 	bl	80005a4 <HAL_GetTick>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	2b64      	cmp	r3, #100	; 0x64
 8000c30:	d901      	bls.n	8000c36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000c32:	2303      	movs	r3, #3
 8000c34:	e1fb      	b.n	800102e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c36:	4b76      	ldr	r3, [pc, #472]	; (8000e10 <HAL_RCC_OscConfig+0x2ac>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d0f0      	beq.n	8000c24 <HAL_RCC_OscConfig+0xc0>
 8000c42:	e014      	b.n	8000c6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c44:	f7ff fcae 	bl	80005a4 <HAL_GetTick>
 8000c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c4a:	e008      	b.n	8000c5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c4c:	f7ff fcaa 	bl	80005a4 <HAL_GetTick>
 8000c50:	4602      	mov	r2, r0
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	2b64      	cmp	r3, #100	; 0x64
 8000c58:	d901      	bls.n	8000c5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	e1e7      	b.n	800102e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c5e:	4b6c      	ldr	r3, [pc, #432]	; (8000e10 <HAL_RCC_OscConfig+0x2ac>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d1f0      	bne.n	8000c4c <HAL_RCC_OscConfig+0xe8>
 8000c6a:	e000      	b.n	8000c6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f003 0302 	and.w	r3, r3, #2
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d063      	beq.n	8000d42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c7a:	4b65      	ldr	r3, [pc, #404]	; (8000e10 <HAL_RCC_OscConfig+0x2ac>)
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	f003 030c 	and.w	r3, r3, #12
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d00b      	beq.n	8000c9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c86:	4b62      	ldr	r3, [pc, #392]	; (8000e10 <HAL_RCC_OscConfig+0x2ac>)
 8000c88:	689b      	ldr	r3, [r3, #8]
 8000c8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c8e:	2b08      	cmp	r3, #8
 8000c90:	d11c      	bne.n	8000ccc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c92:	4b5f      	ldr	r3, [pc, #380]	; (8000e10 <HAL_RCC_OscConfig+0x2ac>)
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d116      	bne.n	8000ccc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c9e:	4b5c      	ldr	r3, [pc, #368]	; (8000e10 <HAL_RCC_OscConfig+0x2ac>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f003 0302 	and.w	r3, r3, #2
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d005      	beq.n	8000cb6 <HAL_RCC_OscConfig+0x152>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	68db      	ldr	r3, [r3, #12]
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d001      	beq.n	8000cb6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e1bb      	b.n	800102e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cb6:	4956      	ldr	r1, [pc, #344]	; (8000e10 <HAL_RCC_OscConfig+0x2ac>)
 8000cb8:	4b55      	ldr	r3, [pc, #340]	; (8000e10 <HAL_RCC_OscConfig+0x2ac>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	691b      	ldr	r3, [r3, #16]
 8000cc4:	00db      	lsls	r3, r3, #3
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cca:	e03a      	b.n	8000d42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d020      	beq.n	8000d16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cd4:	4b4f      	ldr	r3, [pc, #316]	; (8000e14 <HAL_RCC_OscConfig+0x2b0>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cda:	f7ff fc63 	bl	80005a4 <HAL_GetTick>
 8000cde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ce0:	e008      	b.n	8000cf4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ce2:	f7ff fc5f 	bl	80005a4 <HAL_GetTick>
 8000ce6:	4602      	mov	r2, r0
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	1ad3      	subs	r3, r2, r3
 8000cec:	2b02      	cmp	r3, #2
 8000cee:	d901      	bls.n	8000cf4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	e19c      	b.n	800102e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cf4:	4b46      	ldr	r3, [pc, #280]	; (8000e10 <HAL_RCC_OscConfig+0x2ac>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f003 0302 	and.w	r3, r3, #2
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d0f0      	beq.n	8000ce2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d00:	4943      	ldr	r1, [pc, #268]	; (8000e10 <HAL_RCC_OscConfig+0x2ac>)
 8000d02:	4b43      	ldr	r3, [pc, #268]	; (8000e10 <HAL_RCC_OscConfig+0x2ac>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	691b      	ldr	r3, [r3, #16]
 8000d0e:	00db      	lsls	r3, r3, #3
 8000d10:	4313      	orrs	r3, r2
 8000d12:	600b      	str	r3, [r1, #0]
 8000d14:	e015      	b.n	8000d42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d16:	4b3f      	ldr	r3, [pc, #252]	; (8000e14 <HAL_RCC_OscConfig+0x2b0>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d1c:	f7ff fc42 	bl	80005a4 <HAL_GetTick>
 8000d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d22:	e008      	b.n	8000d36 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d24:	f7ff fc3e 	bl	80005a4 <HAL_GetTick>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d901      	bls.n	8000d36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000d32:	2303      	movs	r3, #3
 8000d34:	e17b      	b.n	800102e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d36:	4b36      	ldr	r3, [pc, #216]	; (8000e10 <HAL_RCC_OscConfig+0x2ac>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f003 0302 	and.w	r3, r3, #2
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d1f0      	bne.n	8000d24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f003 0308 	and.w	r3, r3, #8
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d030      	beq.n	8000db0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	695b      	ldr	r3, [r3, #20]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d016      	beq.n	8000d84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d56:	4b30      	ldr	r3, [pc, #192]	; (8000e18 <HAL_RCC_OscConfig+0x2b4>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d5c:	f7ff fc22 	bl	80005a4 <HAL_GetTick>
 8000d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d62:	e008      	b.n	8000d76 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d64:	f7ff fc1e 	bl	80005a4 <HAL_GetTick>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	d901      	bls.n	8000d76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000d72:	2303      	movs	r3, #3
 8000d74:	e15b      	b.n	800102e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d76:	4b26      	ldr	r3, [pc, #152]	; (8000e10 <HAL_RCC_OscConfig+0x2ac>)
 8000d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d7a:	f003 0302 	and.w	r3, r3, #2
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d0f0      	beq.n	8000d64 <HAL_RCC_OscConfig+0x200>
 8000d82:	e015      	b.n	8000db0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d84:	4b24      	ldr	r3, [pc, #144]	; (8000e18 <HAL_RCC_OscConfig+0x2b4>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d8a:	f7ff fc0b 	bl	80005a4 <HAL_GetTick>
 8000d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d90:	e008      	b.n	8000da4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d92:	f7ff fc07 	bl	80005a4 <HAL_GetTick>
 8000d96:	4602      	mov	r2, r0
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	1ad3      	subs	r3, r2, r3
 8000d9c:	2b02      	cmp	r3, #2
 8000d9e:	d901      	bls.n	8000da4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000da0:	2303      	movs	r3, #3
 8000da2:	e144      	b.n	800102e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000da4:	4b1a      	ldr	r3, [pc, #104]	; (8000e10 <HAL_RCC_OscConfig+0x2ac>)
 8000da6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000da8:	f003 0302 	and.w	r3, r3, #2
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d1f0      	bne.n	8000d92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f003 0304 	and.w	r3, r3, #4
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	f000 80a0 	beq.w	8000efe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dc2:	4b13      	ldr	r3, [pc, #76]	; (8000e10 <HAL_RCC_OscConfig+0x2ac>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d10f      	bne.n	8000dee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	4a0f      	ldr	r2, [pc, #60]	; (8000e10 <HAL_RCC_OscConfig+0x2ac>)
 8000dd4:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <HAL_RCC_OscConfig+0x2ac>)
 8000dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dde:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <HAL_RCC_OscConfig+0x2ac>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000dea:	2301      	movs	r3, #1
 8000dec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dee:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <HAL_RCC_OscConfig+0x2b8>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d121      	bne.n	8000e3e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000dfa:	4a08      	ldr	r2, [pc, #32]	; (8000e1c <HAL_RCC_OscConfig+0x2b8>)
 8000dfc:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <HAL_RCC_OscConfig+0x2b8>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e06:	f7ff fbcd 	bl	80005a4 <HAL_GetTick>
 8000e0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e0c:	e011      	b.n	8000e32 <HAL_RCC_OscConfig+0x2ce>
 8000e0e:	bf00      	nop
 8000e10:	40023800 	.word	0x40023800
 8000e14:	42470000 	.word	0x42470000
 8000e18:	42470e80 	.word	0x42470e80
 8000e1c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e20:	f7ff fbc0 	bl	80005a4 <HAL_GetTick>
 8000e24:	4602      	mov	r2, r0
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	d901      	bls.n	8000e32 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	e0fd      	b.n	800102e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e32:	4b81      	ldr	r3, [pc, #516]	; (8001038 <HAL_RCC_OscConfig+0x4d4>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d0f0      	beq.n	8000e20 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d106      	bne.n	8000e54 <HAL_RCC_OscConfig+0x2f0>
 8000e46:	4a7d      	ldr	r2, [pc, #500]	; (800103c <HAL_RCC_OscConfig+0x4d8>)
 8000e48:	4b7c      	ldr	r3, [pc, #496]	; (800103c <HAL_RCC_OscConfig+0x4d8>)
 8000e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	6713      	str	r3, [r2, #112]	; 0x70
 8000e52:	e01c      	b.n	8000e8e <HAL_RCC_OscConfig+0x32a>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	2b05      	cmp	r3, #5
 8000e5a:	d10c      	bne.n	8000e76 <HAL_RCC_OscConfig+0x312>
 8000e5c:	4a77      	ldr	r2, [pc, #476]	; (800103c <HAL_RCC_OscConfig+0x4d8>)
 8000e5e:	4b77      	ldr	r3, [pc, #476]	; (800103c <HAL_RCC_OscConfig+0x4d8>)
 8000e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e62:	f043 0304 	orr.w	r3, r3, #4
 8000e66:	6713      	str	r3, [r2, #112]	; 0x70
 8000e68:	4a74      	ldr	r2, [pc, #464]	; (800103c <HAL_RCC_OscConfig+0x4d8>)
 8000e6a:	4b74      	ldr	r3, [pc, #464]	; (800103c <HAL_RCC_OscConfig+0x4d8>)
 8000e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e6e:	f043 0301 	orr.w	r3, r3, #1
 8000e72:	6713      	str	r3, [r2, #112]	; 0x70
 8000e74:	e00b      	b.n	8000e8e <HAL_RCC_OscConfig+0x32a>
 8000e76:	4a71      	ldr	r2, [pc, #452]	; (800103c <HAL_RCC_OscConfig+0x4d8>)
 8000e78:	4b70      	ldr	r3, [pc, #448]	; (800103c <HAL_RCC_OscConfig+0x4d8>)
 8000e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e7c:	f023 0301 	bic.w	r3, r3, #1
 8000e80:	6713      	str	r3, [r2, #112]	; 0x70
 8000e82:	4a6e      	ldr	r2, [pc, #440]	; (800103c <HAL_RCC_OscConfig+0x4d8>)
 8000e84:	4b6d      	ldr	r3, [pc, #436]	; (800103c <HAL_RCC_OscConfig+0x4d8>)
 8000e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e88:	f023 0304 	bic.w	r3, r3, #4
 8000e8c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d015      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e96:	f7ff fb85 	bl	80005a4 <HAL_GetTick>
 8000e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e9c:	e00a      	b.n	8000eb4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e9e:	f7ff fb81 	bl	80005a4 <HAL_GetTick>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	1ad3      	subs	r3, r2, r3
 8000ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d901      	bls.n	8000eb4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	e0bc      	b.n	800102e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000eb4:	4b61      	ldr	r3, [pc, #388]	; (800103c <HAL_RCC_OscConfig+0x4d8>)
 8000eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eb8:	f003 0302 	and.w	r3, r3, #2
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d0ee      	beq.n	8000e9e <HAL_RCC_OscConfig+0x33a>
 8000ec0:	e014      	b.n	8000eec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ec2:	f7ff fb6f 	bl	80005a4 <HAL_GetTick>
 8000ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ec8:	e00a      	b.n	8000ee0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eca:	f7ff fb6b 	bl	80005a4 <HAL_GetTick>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d901      	bls.n	8000ee0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000edc:	2303      	movs	r3, #3
 8000ede:	e0a6      	b.n	800102e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ee0:	4b56      	ldr	r3, [pc, #344]	; (800103c <HAL_RCC_OscConfig+0x4d8>)
 8000ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ee4:	f003 0302 	and.w	r3, r3, #2
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d1ee      	bne.n	8000eca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000eec:	7dfb      	ldrb	r3, [r7, #23]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d105      	bne.n	8000efe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ef2:	4a52      	ldr	r2, [pc, #328]	; (800103c <HAL_RCC_OscConfig+0x4d8>)
 8000ef4:	4b51      	ldr	r3, [pc, #324]	; (800103c <HAL_RCC_OscConfig+0x4d8>)
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000efc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	699b      	ldr	r3, [r3, #24]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	f000 8092 	beq.w	800102c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f08:	4b4c      	ldr	r3, [pc, #304]	; (800103c <HAL_RCC_OscConfig+0x4d8>)
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	f003 030c 	and.w	r3, r3, #12
 8000f10:	2b08      	cmp	r3, #8
 8000f12:	d05c      	beq.n	8000fce <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d141      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f1c:	4b48      	ldr	r3, [pc, #288]	; (8001040 <HAL_RCC_OscConfig+0x4dc>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f22:	f7ff fb3f 	bl	80005a4 <HAL_GetTick>
 8000f26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f28:	e008      	b.n	8000f3c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f2a:	f7ff fb3b 	bl	80005a4 <HAL_GetTick>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d901      	bls.n	8000f3c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	e078      	b.n	800102e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f3c:	4b3f      	ldr	r3, [pc, #252]	; (800103c <HAL_RCC_OscConfig+0x4d8>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d1f0      	bne.n	8000f2a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000f48:	493c      	ldr	r1, [pc, #240]	; (800103c <HAL_RCC_OscConfig+0x4d8>)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	69da      	ldr	r2, [r3, #28]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6a1b      	ldr	r3, [r3, #32]
 8000f52:	431a      	orrs	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f58:	019b      	lsls	r3, r3, #6
 8000f5a:	431a      	orrs	r2, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f60:	085b      	lsrs	r3, r3, #1
 8000f62:	3b01      	subs	r3, #1
 8000f64:	041b      	lsls	r3, r3, #16
 8000f66:	431a      	orrs	r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f6c:	061b      	lsls	r3, r3, #24
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f72:	4b33      	ldr	r3, [pc, #204]	; (8001040 <HAL_RCC_OscConfig+0x4dc>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f78:	f7ff fb14 	bl	80005a4 <HAL_GetTick>
 8000f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f7e:	e008      	b.n	8000f92 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f80:	f7ff fb10 	bl	80005a4 <HAL_GetTick>
 8000f84:	4602      	mov	r2, r0
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d901      	bls.n	8000f92 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	e04d      	b.n	800102e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f92:	4b2a      	ldr	r3, [pc, #168]	; (800103c <HAL_RCC_OscConfig+0x4d8>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d0f0      	beq.n	8000f80 <HAL_RCC_OscConfig+0x41c>
 8000f9e:	e045      	b.n	800102c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fa0:	4b27      	ldr	r3, [pc, #156]	; (8001040 <HAL_RCC_OscConfig+0x4dc>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa6:	f7ff fafd 	bl	80005a4 <HAL_GetTick>
 8000faa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fac:	e008      	b.n	8000fc0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fae:	f7ff faf9 	bl	80005a4 <HAL_GetTick>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d901      	bls.n	8000fc0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	e036      	b.n	800102e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fc0:	4b1e      	ldr	r3, [pc, #120]	; (800103c <HAL_RCC_OscConfig+0x4d8>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d1f0      	bne.n	8000fae <HAL_RCC_OscConfig+0x44a>
 8000fcc:	e02e      	b.n	800102c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d101      	bne.n	8000fda <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e029      	b.n	800102e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8000fda:	4b18      	ldr	r3, [pc, #96]	; (800103c <HAL_RCC_OscConfig+0x4d8>)
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d11c      	bne.n	8001028 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d115      	bne.n	8001028 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000ffc:	68fa      	ldr	r2, [r7, #12]
 8000ffe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001002:	4013      	ands	r3, r2
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001008:	4293      	cmp	r3, r2
 800100a:	d10d      	bne.n	8001028 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001016:	429a      	cmp	r2, r3
 8001018:	d106      	bne.n	8001028 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001024:	429a      	cmp	r2, r3
 8001026:	d001      	beq.n	800102c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	e000      	b.n	800102e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40007000 	.word	0x40007000
 800103c:	40023800 	.word	0x40023800
 8001040:	42470060 	.word	0x42470060

08001044 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d101      	bne.n	8001058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001054:	2301      	movs	r3, #1
 8001056:	e0cc      	b.n	80011f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001058:	4b68      	ldr	r3, [pc, #416]	; (80011fc <HAL_RCC_ClockConfig+0x1b8>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 020f 	and.w	r2, r3, #15
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	429a      	cmp	r2, r3
 8001064:	d20c      	bcs.n	8001080 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001066:	4b65      	ldr	r3, [pc, #404]	; (80011fc <HAL_RCC_ClockConfig+0x1b8>)
 8001068:	683a      	ldr	r2, [r7, #0]
 800106a:	b2d2      	uxtb	r2, r2
 800106c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800106e:	4b63      	ldr	r3, [pc, #396]	; (80011fc <HAL_RCC_ClockConfig+0x1b8>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 020f 	and.w	r2, r3, #15
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	429a      	cmp	r2, r3
 800107a:	d001      	beq.n	8001080 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	e0b8      	b.n	80011f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f003 0302 	and.w	r3, r3, #2
 8001088:	2b00      	cmp	r3, #0
 800108a:	d020      	beq.n	80010ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 0304 	and.w	r3, r3, #4
 8001094:	2b00      	cmp	r3, #0
 8001096:	d005      	beq.n	80010a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001098:	4a59      	ldr	r2, [pc, #356]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 800109a:	4b59      	ldr	r3, [pc, #356]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80010a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f003 0308 	and.w	r3, r3, #8
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d005      	beq.n	80010bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010b0:	4a53      	ldr	r2, [pc, #332]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 80010b2:	4b53      	ldr	r3, [pc, #332]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80010ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010bc:	4950      	ldr	r1, [pc, #320]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 80010be:	4b50      	ldr	r3, [pc, #320]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d044      	beq.n	8001164 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d107      	bne.n	80010f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010e2:	4b47      	ldr	r3, [pc, #284]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d119      	bne.n	8001122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e07f      	b.n	80011f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d003      	beq.n	8001102 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010fe:	2b03      	cmp	r3, #3
 8001100:	d107      	bne.n	8001112 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001102:	4b3f      	ldr	r3, [pc, #252]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d109      	bne.n	8001122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e06f      	b.n	80011f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001112:	4b3b      	ldr	r3, [pc, #236]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	2b00      	cmp	r3, #0
 800111c:	d101      	bne.n	8001122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e067      	b.n	80011f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001122:	4937      	ldr	r1, [pc, #220]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 8001124:	4b36      	ldr	r3, [pc, #216]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	f023 0203 	bic.w	r2, r3, #3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	4313      	orrs	r3, r2
 8001132:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001134:	f7ff fa36 	bl	80005a4 <HAL_GetTick>
 8001138:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800113a:	e00a      	b.n	8001152 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800113c:	f7ff fa32 	bl	80005a4 <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	f241 3288 	movw	r2, #5000	; 0x1388
 800114a:	4293      	cmp	r3, r2
 800114c:	d901      	bls.n	8001152 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800114e:	2303      	movs	r3, #3
 8001150:	e04f      	b.n	80011f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001152:	4b2b      	ldr	r3, [pc, #172]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	f003 020c 	and.w	r2, r3, #12
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	429a      	cmp	r2, r3
 8001162:	d1eb      	bne.n	800113c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001164:	4b25      	ldr	r3, [pc, #148]	; (80011fc <HAL_RCC_ClockConfig+0x1b8>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 020f 	and.w	r2, r3, #15
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	429a      	cmp	r2, r3
 8001170:	d90c      	bls.n	800118c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001172:	4b22      	ldr	r3, [pc, #136]	; (80011fc <HAL_RCC_ClockConfig+0x1b8>)
 8001174:	683a      	ldr	r2, [r7, #0]
 8001176:	b2d2      	uxtb	r2, r2
 8001178:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800117a:	4b20      	ldr	r3, [pc, #128]	; (80011fc <HAL_RCC_ClockConfig+0x1b8>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 020f 	and.w	r2, r3, #15
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	429a      	cmp	r2, r3
 8001186:	d001      	beq.n	800118c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e032      	b.n	80011f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 0304 	and.w	r3, r3, #4
 8001194:	2b00      	cmp	r3, #0
 8001196:	d008      	beq.n	80011aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001198:	4919      	ldr	r1, [pc, #100]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 800119a:	4b19      	ldr	r3, [pc, #100]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0308 	and.w	r3, r3, #8
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d009      	beq.n	80011ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011b6:	4912      	ldr	r1, [pc, #72]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 80011b8:	4b11      	ldr	r3, [pc, #68]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	691b      	ldr	r3, [r3, #16]
 80011c4:	00db      	lsls	r3, r3, #3
 80011c6:	4313      	orrs	r3, r2
 80011c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011ca:	f000 f821 	bl	8001210 <HAL_RCC_GetSysClockFreq>
 80011ce:	4601      	mov	r1, r0
 80011d0:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	091b      	lsrs	r3, r3, #4
 80011d6:	f003 030f 	and.w	r3, r3, #15
 80011da:	4a0a      	ldr	r2, [pc, #40]	; (8001204 <HAL_RCC_ClockConfig+0x1c0>)
 80011dc:	5cd3      	ldrb	r3, [r2, r3]
 80011de:	fa21 f303 	lsr.w	r3, r1, r3
 80011e2:	4a09      	ldr	r2, [pc, #36]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 80011e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <HAL_RCC_ClockConfig+0x1c8>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff f996 	bl	800051c <HAL_InitTick>

  return HAL_OK;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40023c00 	.word	0x40023c00
 8001200:	40023800 	.word	0x40023800
 8001204:	080016ac 	.word	0x080016ac
 8001208:	20000008 	.word	0x20000008
 800120c:	20000000 	.word	0x20000000

08001210 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001214:	b087      	sub	sp, #28
 8001216:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001218:	2200      	movs	r2, #0
 800121a:	60fa      	str	r2, [r7, #12]
 800121c:	2200      	movs	r2, #0
 800121e:	617a      	str	r2, [r7, #20]
 8001220:	2200      	movs	r2, #0
 8001222:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 8001224:	2200      	movs	r2, #0
 8001226:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001228:	4a51      	ldr	r2, [pc, #324]	; (8001370 <HAL_RCC_GetSysClockFreq+0x160>)
 800122a:	6892      	ldr	r2, [r2, #8]
 800122c:	f002 020c 	and.w	r2, r2, #12
 8001230:	2a04      	cmp	r2, #4
 8001232:	d007      	beq.n	8001244 <HAL_RCC_GetSysClockFreq+0x34>
 8001234:	2a08      	cmp	r2, #8
 8001236:	d008      	beq.n	800124a <HAL_RCC_GetSysClockFreq+0x3a>
 8001238:	2a00      	cmp	r2, #0
 800123a:	f040 8090 	bne.w	800135e <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800123e:	4b4d      	ldr	r3, [pc, #308]	; (8001374 <HAL_RCC_GetSysClockFreq+0x164>)
 8001240:	613b      	str	r3, [r7, #16]
       break;
 8001242:	e08f      	b.n	8001364 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001244:	4b4c      	ldr	r3, [pc, #304]	; (8001378 <HAL_RCC_GetSysClockFreq+0x168>)
 8001246:	613b      	str	r3, [r7, #16]
      break;
 8001248:	e08c      	b.n	8001364 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800124a:	4a49      	ldr	r2, [pc, #292]	; (8001370 <HAL_RCC_GetSysClockFreq+0x160>)
 800124c:	6852      	ldr	r2, [r2, #4]
 800124e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001252:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001254:	4a46      	ldr	r2, [pc, #280]	; (8001370 <HAL_RCC_GetSysClockFreq+0x160>)
 8001256:	6852      	ldr	r2, [r2, #4]
 8001258:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800125c:	2a00      	cmp	r2, #0
 800125e:	d023      	beq.n	80012a8 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001260:	4b43      	ldr	r3, [pc, #268]	; (8001370 <HAL_RCC_GetSysClockFreq+0x160>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	099b      	lsrs	r3, r3, #6
 8001266:	f04f 0400 	mov.w	r4, #0
 800126a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800126e:	f04f 0200 	mov.w	r2, #0
 8001272:	ea03 0301 	and.w	r3, r3, r1
 8001276:	ea04 0402 	and.w	r4, r4, r2
 800127a:	4a3f      	ldr	r2, [pc, #252]	; (8001378 <HAL_RCC_GetSysClockFreq+0x168>)
 800127c:	fb02 f104 	mul.w	r1, r2, r4
 8001280:	2200      	movs	r2, #0
 8001282:	fb02 f203 	mul.w	r2, r2, r3
 8001286:	440a      	add	r2, r1
 8001288:	493b      	ldr	r1, [pc, #236]	; (8001378 <HAL_RCC_GetSysClockFreq+0x168>)
 800128a:	fba3 0101 	umull	r0, r1, r3, r1
 800128e:	1853      	adds	r3, r2, r1
 8001290:	4619      	mov	r1, r3
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	f04f 0400 	mov.w	r4, #0
 8001298:	461a      	mov	r2, r3
 800129a:	4623      	mov	r3, r4
 800129c:	f7fe ff94 	bl	80001c8 <__aeabi_uldivmod>
 80012a0:	4603      	mov	r3, r0
 80012a2:	460c      	mov	r4, r1
 80012a4:	617b      	str	r3, [r7, #20]
 80012a6:	e04c      	b.n	8001342 <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012a8:	4a31      	ldr	r2, [pc, #196]	; (8001370 <HAL_RCC_GetSysClockFreq+0x160>)
 80012aa:	6852      	ldr	r2, [r2, #4]
 80012ac:	0992      	lsrs	r2, r2, #6
 80012ae:	4611      	mov	r1, r2
 80012b0:	f04f 0200 	mov.w	r2, #0
 80012b4:	f240 15ff 	movw	r5, #511	; 0x1ff
 80012b8:	f04f 0600 	mov.w	r6, #0
 80012bc:	ea05 0501 	and.w	r5, r5, r1
 80012c0:	ea06 0602 	and.w	r6, r6, r2
 80012c4:	4629      	mov	r1, r5
 80012c6:	4632      	mov	r2, r6
 80012c8:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 80012cc:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 80012d0:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 80012d4:	4651      	mov	r1, sl
 80012d6:	465a      	mov	r2, fp
 80012d8:	46aa      	mov	sl, r5
 80012da:	46b3      	mov	fp, r6
 80012dc:	4655      	mov	r5, sl
 80012de:	465e      	mov	r6, fp
 80012e0:	1b4d      	subs	r5, r1, r5
 80012e2:	eb62 0606 	sbc.w	r6, r2, r6
 80012e6:	4629      	mov	r1, r5
 80012e8:	4632      	mov	r2, r6
 80012ea:	0194      	lsls	r4, r2, #6
 80012ec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80012f0:	018b      	lsls	r3, r1, #6
 80012f2:	1a5b      	subs	r3, r3, r1
 80012f4:	eb64 0402 	sbc.w	r4, r4, r2
 80012f8:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 80012fc:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8001300:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8001304:	4643      	mov	r3, r8
 8001306:	464c      	mov	r4, r9
 8001308:	4655      	mov	r5, sl
 800130a:	465e      	mov	r6, fp
 800130c:	18ed      	adds	r5, r5, r3
 800130e:	eb46 0604 	adc.w	r6, r6, r4
 8001312:	462b      	mov	r3, r5
 8001314:	4634      	mov	r4, r6
 8001316:	02a2      	lsls	r2, r4, #10
 8001318:	607a      	str	r2, [r7, #4]
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001320:	607a      	str	r2, [r7, #4]
 8001322:	029b      	lsls	r3, r3, #10
 8001324:	603b      	str	r3, [r7, #0]
 8001326:	e897 0018 	ldmia.w	r7, {r3, r4}
 800132a:	4618      	mov	r0, r3
 800132c:	4621      	mov	r1, r4
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	f04f 0400 	mov.w	r4, #0
 8001334:	461a      	mov	r2, r3
 8001336:	4623      	mov	r3, r4
 8001338:	f7fe ff46 	bl	80001c8 <__aeabi_uldivmod>
 800133c:	4603      	mov	r3, r0
 800133e:	460c      	mov	r4, r1
 8001340:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001342:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <HAL_RCC_GetSysClockFreq+0x160>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	0c1b      	lsrs	r3, r3, #16
 8001348:	f003 0303 	and.w	r3, r3, #3
 800134c:	3301      	adds	r3, #1
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001352:	697a      	ldr	r2, [r7, #20]
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	fbb2 f3f3 	udiv	r3, r2, r3
 800135a:	613b      	str	r3, [r7, #16]
      break;
 800135c:	e002      	b.n	8001364 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800135e:	4b05      	ldr	r3, [pc, #20]	; (8001374 <HAL_RCC_GetSysClockFreq+0x164>)
 8001360:	613b      	str	r3, [r7, #16]
      break;
 8001362:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001364:	693b      	ldr	r3, [r7, #16]
}
 8001366:	4618      	mov	r0, r3
 8001368:	371c      	adds	r7, #28
 800136a:	46bd      	mov	sp, r7
 800136c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001370:	40023800 	.word	0x40023800
 8001374:	00f42400 	.word	0x00f42400
 8001378:	017d7840 	.word	0x017d7840

0800137c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001380:	f7ff f8aa 	bl	80004d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001384:	f000 f80e 	bl	80013a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001388:	f000 f876 	bl	8001478 <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_GPIO_TogglePin(LED13_GPIO_Port,LED13_Pin);
 800138c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001390:	4803      	ldr	r0, [pc, #12]	; (80013a0 <main+0x24>)
 8001392:	f7ff fbcc 	bl	8000b2e <HAL_GPIO_TogglePin>
    HAL_Delay(250);
 8001396:	20fa      	movs	r0, #250	; 0xfa
 8001398:	f7ff f910 	bl	80005bc <HAL_Delay>
	HAL_GPIO_TogglePin(LED13_GPIO_Port,LED13_Pin);
 800139c:	e7f6      	b.n	800138c <main+0x10>
 800139e:	bf00      	nop
 80013a0:	40020800 	.word	0x40020800

080013a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b094      	sub	sp, #80	; 0x50
 80013a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013aa:	f107 0320 	add.w	r3, r7, #32
 80013ae:	2230      	movs	r2, #48	; 0x30
 80013b0:	2100      	movs	r1, #0
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 f966 	bl	8001684 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b8:	f107 030c 	add.w	r3, r7, #12
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c8:	2300      	movs	r3, #0
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	4a28      	ldr	r2, [pc, #160]	; (8001470 <SystemClock_Config+0xcc>)
 80013ce:	4b28      	ldr	r3, [pc, #160]	; (8001470 <SystemClock_Config+0xcc>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d6:	6413      	str	r3, [r2, #64]	; 0x40
 80013d8:	4b25      	ldr	r3, [pc, #148]	; (8001470 <SystemClock_Config+0xcc>)
 80013da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e0:	60bb      	str	r3, [r7, #8]
 80013e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013e4:	2300      	movs	r3, #0
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	4a22      	ldr	r2, [pc, #136]	; (8001474 <SystemClock_Config+0xd0>)
 80013ea:	4b22      	ldr	r3, [pc, #136]	; (8001474 <SystemClock_Config+0xd0>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f2:	6013      	str	r3, [r2, #0]
 80013f4:	4b1f      	ldr	r3, [pc, #124]	; (8001474 <SystemClock_Config+0xd0>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013fc:	607b      	str	r3, [r7, #4]
 80013fe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001400:	2301      	movs	r3, #1
 8001402:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001404:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800140a:	2302      	movs	r3, #2
 800140c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800140e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001412:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001414:	2310      	movs	r3, #16
 8001416:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001418:	23c0      	movs	r3, #192	; 0xc0
 800141a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800141c:	2302      	movs	r3, #2
 800141e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001420:	2304      	movs	r3, #4
 8001422:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001424:	f107 0320 	add.w	r3, r7, #32
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff fb9b 	bl	8000b64 <HAL_RCC_OscConfig>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001434:	f000 f864 	bl	8001500 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001438:	230f      	movs	r3, #15
 800143a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800143c:	2302      	movs	r3, #2
 800143e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001444:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001448:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800144a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800144e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001450:	f107 030c 	add.w	r3, r7, #12
 8001454:	2104      	movs	r1, #4
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff fdf4 	bl	8001044 <HAL_RCC_ClockConfig>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001462:	f000 f84d 	bl	8001500 <Error_Handler>
  }
}
 8001466:	bf00      	nop
 8001468:	3750      	adds	r7, #80	; 0x50
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40023800 	.word	0x40023800
 8001474:	40007000 	.word	0x40007000

08001478 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b088      	sub	sp, #32
 800147c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147e:	f107 030c 	add.w	r3, r7, #12
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	60da      	str	r2, [r3, #12]
 800148c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	60bb      	str	r3, [r7, #8]
 8001492:	4a19      	ldr	r2, [pc, #100]	; (80014f8 <MX_GPIO_Init+0x80>)
 8001494:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <MX_GPIO_Init+0x80>)
 8001496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001498:	f043 0304 	orr.w	r3, r3, #4
 800149c:	6313      	str	r3, [r2, #48]	; 0x30
 800149e:	4b16      	ldr	r3, [pc, #88]	; (80014f8 <MX_GPIO_Init+0x80>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	f003 0304 	and.w	r3, r3, #4
 80014a6:	60bb      	str	r3, [r7, #8]
 80014a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	607b      	str	r3, [r7, #4]
 80014ae:	4a12      	ldr	r2, [pc, #72]	; (80014f8 <MX_GPIO_Init+0x80>)
 80014b0:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <MX_GPIO_Init+0x80>)
 80014b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ba:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <MX_GPIO_Init+0x80>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED13_GPIO_Port, LED13_Pin, GPIO_PIN_RESET);
 80014c6:	2200      	movs	r2, #0
 80014c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014cc:	480b      	ldr	r0, [pc, #44]	; (80014fc <MX_GPIO_Init+0x84>)
 80014ce:	f7ff fb15 	bl	8000afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED13_Pin */
  GPIO_InitStruct.Pin = LED13_Pin;
 80014d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d8:	2301      	movs	r3, #1
 80014da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED13_GPIO_Port, &GPIO_InitStruct);
 80014e4:	f107 030c 	add.w	r3, r7, #12
 80014e8:	4619      	mov	r1, r3
 80014ea:	4804      	ldr	r0, [pc, #16]	; (80014fc <MX_GPIO_Init+0x84>)
 80014ec:	f7ff f96c 	bl	80007c8 <HAL_GPIO_Init>

}
 80014f0:	bf00      	nop
 80014f2:	3720      	adds	r7, #32
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40020800 	.word	0x40020800

08001500 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
	...

08001510 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	607b      	str	r3, [r7, #4]
 800151a:	4a10      	ldr	r2, [pc, #64]	; (800155c <HAL_MspInit+0x4c>)
 800151c:	4b0f      	ldr	r3, [pc, #60]	; (800155c <HAL_MspInit+0x4c>)
 800151e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001520:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001524:	6453      	str	r3, [r2, #68]	; 0x44
 8001526:	4b0d      	ldr	r3, [pc, #52]	; (800155c <HAL_MspInit+0x4c>)
 8001528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800152e:	607b      	str	r3, [r7, #4]
 8001530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	603b      	str	r3, [r7, #0]
 8001536:	4a09      	ldr	r2, [pc, #36]	; (800155c <HAL_MspInit+0x4c>)
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <HAL_MspInit+0x4c>)
 800153a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001540:	6413      	str	r3, [r2, #64]	; 0x40
 8001542:	4b06      	ldr	r3, [pc, #24]	; (800155c <HAL_MspInit+0x4c>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154a:	603b      	str	r3, [r7, #0]
 800154c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	40023800 	.word	0x40023800

08001560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001572:	e7fe      	b.n	8001572 <HardFault_Handler+0x4>

08001574 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001578:	e7fe      	b.n	8001578 <MemManage_Handler+0x4>

0800157a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800157e:	e7fe      	b.n	800157e <BusFault_Handler+0x4>

08001580 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001584:	e7fe      	b.n	8001584 <UsageFault_Handler+0x4>

08001586 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015a2:	b480      	push	{r7}
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015b4:	f7fe ffe2 	bl	800057c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015b8:	bf00      	nop
 80015ba:	bd80      	pop	{r7, pc}

080015bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015c0:	4a08      	ldr	r2, [pc, #32]	; (80015e4 <SystemInit+0x28>)
 80015c2:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <SystemInit+0x28>)
 80015c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015d0:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <SystemInit+0x28>)
 80015d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015d6:	609a      	str	r2, [r3, #8]
#endif
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80015e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001620 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80015ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80015ee:	e003      	b.n	80015f8 <LoopCopyDataInit>

080015f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80015f0:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80015f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80015f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80015f6:	3104      	adds	r1, #4

080015f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80015f8:	480b      	ldr	r0, [pc, #44]	; (8001628 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80015fa:	4b0c      	ldr	r3, [pc, #48]	; (800162c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80015fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80015fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001600:	d3f6      	bcc.n	80015f0 <CopyDataInit>
  ldr  r2, =_sbss
 8001602:	4a0b      	ldr	r2, [pc, #44]	; (8001630 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001604:	e002      	b.n	800160c <LoopFillZerobss>

08001606 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001606:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001608:	f842 3b04 	str.w	r3, [r2], #4

0800160c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800160c:	4b09      	ldr	r3, [pc, #36]	; (8001634 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800160e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001610:	d3f9      	bcc.n	8001606 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001612:	f7ff ffd3 	bl	80015bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001616:	f000 f811 	bl	800163c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800161a:	f7ff feaf 	bl	800137c <main>
  bx  lr    
 800161e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001620:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001624:	080016cc 	.word	0x080016cc
  ldr  r0, =_sdata
 8001628:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800162c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001630:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001634:	2000002c 	.word	0x2000002c

08001638 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001638:	e7fe      	b.n	8001638 <ADC_IRQHandler>
	...

0800163c <__libc_init_array>:
 800163c:	b570      	push	{r4, r5, r6, lr}
 800163e:	4e0d      	ldr	r6, [pc, #52]	; (8001674 <__libc_init_array+0x38>)
 8001640:	4c0d      	ldr	r4, [pc, #52]	; (8001678 <__libc_init_array+0x3c>)
 8001642:	1ba4      	subs	r4, r4, r6
 8001644:	10a4      	asrs	r4, r4, #2
 8001646:	2500      	movs	r5, #0
 8001648:	42a5      	cmp	r5, r4
 800164a:	d109      	bne.n	8001660 <__libc_init_array+0x24>
 800164c:	4e0b      	ldr	r6, [pc, #44]	; (800167c <__libc_init_array+0x40>)
 800164e:	4c0c      	ldr	r4, [pc, #48]	; (8001680 <__libc_init_array+0x44>)
 8001650:	f000 f820 	bl	8001694 <_init>
 8001654:	1ba4      	subs	r4, r4, r6
 8001656:	10a4      	asrs	r4, r4, #2
 8001658:	2500      	movs	r5, #0
 800165a:	42a5      	cmp	r5, r4
 800165c:	d105      	bne.n	800166a <__libc_init_array+0x2e>
 800165e:	bd70      	pop	{r4, r5, r6, pc}
 8001660:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001664:	4798      	blx	r3
 8001666:	3501      	adds	r5, #1
 8001668:	e7ee      	b.n	8001648 <__libc_init_array+0xc>
 800166a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800166e:	4798      	blx	r3
 8001670:	3501      	adds	r5, #1
 8001672:	e7f2      	b.n	800165a <__libc_init_array+0x1e>
 8001674:	080016c4 	.word	0x080016c4
 8001678:	080016c4 	.word	0x080016c4
 800167c:	080016c4 	.word	0x080016c4
 8001680:	080016c8 	.word	0x080016c8

08001684 <memset>:
 8001684:	4402      	add	r2, r0
 8001686:	4603      	mov	r3, r0
 8001688:	4293      	cmp	r3, r2
 800168a:	d100      	bne.n	800168e <memset+0xa>
 800168c:	4770      	bx	lr
 800168e:	f803 1b01 	strb.w	r1, [r3], #1
 8001692:	e7f9      	b.n	8001688 <memset+0x4>

08001694 <_init>:
 8001694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001696:	bf00      	nop
 8001698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800169a:	bc08      	pop	{r3}
 800169c:	469e      	mov	lr, r3
 800169e:	4770      	bx	lr

080016a0 <_fini>:
 80016a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016a2:	bf00      	nop
 80016a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016a6:	bc08      	pop	{r3}
 80016a8:	469e      	mov	lr, r3
 80016aa:	4770      	bx	lr
